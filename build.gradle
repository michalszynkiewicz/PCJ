defaultTasks 'info'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:+'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'

ext.versionNumber = "4.0.0"
ext.buildNumber = "SNAPSHOT"
ext.repoId = org.ajoberstar.grgit.Grgit.open(project.file('.')).head().abbreviatedId

repositories {
        mavenCentral()
}

dependencies {
        testCompile 'junit:junit:4.11'
}

compileJava {
    //options.compilerArgs = ["-profile", "compact3"]
    options.compilerArgs = ["-source", "1.8", "-target", "1.8"]
}

task info {
    println "PCJ -- Parallel Computing in Java build script"
}

task javadoc(overwrite:true, type: Javadoc) {
    failOnError = false
    source = sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) { 
    from javadoc.destinationDir 
} 

task release {
    //outputs.upToDateWhen { false }
    release.dependsOn(jar, javadocJar)
}

build.dependsOn(javadocJar)

gradle.taskGraph.whenReady {taskGraph ->
    if (taskGraph.hasTask(release)) {  
        def versionFile = file('version.properties')
        if (versionFile.canRead()) {
            def Properties properties = new Properties()

            properties.load(new FileInputStream(versionFile))
            
            if (properties['buildNumber']==null) {
                properties['buildNumber'] = 0
            }

            buildNumber = properties['buildNumber'].toInteger() + 1
            properties['buildNumber'] = buildNumber.toString()
            properties.store(versionFile.newWriter(), null)
        }
    }
    jar.doFirst {
        version="$versionNumber.$buildNumber"
        classifier="bin"
    }
    javadocJar.doFirst {
        version="$versionNumber.$buildNumber"
        classifier = 'javadoc'
    }

}

jar {
    from 'LICENSE'
    manifest {
        attributes('Implementation-Version': "$versionNumber.$buildNumber-$repoId",
                'Implementation-Vendor': System.getProperty('user.name'),
                'Implementation-Title': date,
                'Sealed': true,
            //                'Profile': 'compact3',
        )
        attributes(['Sealed': false], 'org/pcj/')
    }
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd HH:mm:ss.SSS z')
    return formattedDate
}
