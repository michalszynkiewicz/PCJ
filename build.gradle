import org.ajoberstar.grgit.Grgit

defaultTasks 'info'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:1.2.0'
        classpath 'org.eclipse.jgit:org.eclipse.jgit:4.0.1.201506240215-r'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'

ext.versionNumber = "5.0"
ext.buildNumber = "SNAPSHOT"
try {
    ext.repoId = Grgit.open(project.file('.')).head().abbreviatedId;
} catch (Exception e){
    ext.repoId = "unknown"    
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.11'
}

compileJava {
    options.compilerArgs = [
		"-source", "1.8",
		"-target", "1.8",
		"-profile", "compact3",
		"-Xlint:unchecked"
    ]
}

task info {
    println "PCJ -- Parallel Computing in Java build script"
}

task javadoc(overwrite:true, type: Javadoc) {
    failOnError = false
    source = sourceSets.main.allJava
    exclude "org/pcj/internal/**"
}

task javadocJar(type: Jar, dependsOn: javadoc) { 
    from javadoc.destinationDir 
} 

task releaseBuild {
    outputs.upToDateWhen { false }
    releaseBuild.dependsOn(clean, jar, javadocJar)
}

gradle.taskGraph.whenReady {taskGraph ->
    def Properties properties = new Properties()

    def versionFile = file('build.version')
    if (versionFile.canRead()) {
        properties.load(new FileInputStream(versionFile))
    }
            
    if (properties['build.number'] == null) {
        properties['build.number'] = '0'
    }

    buildNumber = properties['build.number'].toInteger()
    
    if (taskGraph.hasTask(releaseBuild)) {
        properties['build.number'] = (buildNumber + 1).toString()
        properties.store(versionFile.newWriter(), null)
    } else {
        buildNumber = "$buildNumber-SNAPSHOT-$repoId"
    }
    jar.doFirst {
        version = "$versionNumber.$buildNumber"
        classifier = ''
        manifest {
            attributes('Implementation-Version': "$versionNumber.$buildNumber-$repoId")
        }
    }
    javadocJar.doFirst {
        version = "$versionNumber.$buildNumber"
        classifier = 'javadoc'
    }
}

jar {
    from 'LICENSE'
    manifest {
        attributes('Implementation-Version': "$repoId",
                'Implementation-Vendor': System.getProperty('user.name'),
                'Implementation-Title': date,
                'Sealed': true,
            //    'Profile': 'compact3',
        )
        attributes(['Sealed': false], 'org/pcj/')
    }
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd HH:mm:ss.SSS z')
    return formattedDate
}



// Code needed for running Main classes from Task Packages in NetBeans
def createJavaExec = { String taskName ->
    project.task (taskName, dependsOn: project.testClasses, type: JavaExec) {
        def definedMainClass = project.hasProperty('mainClass') ? project.mainClass : ''
        if (definedMainClass == null) definedMainClass = ''
        definedMainClass = definedMainClass.toString()

        main = definedMainClass
        classpath = project.sourceSets.test.runtimeClasspath
        standardInput = System.in
        //jvmArgs = ["-Xmx3g","-Xms3g"]
        maxHeapSize="2g"
        
    }
}

createJavaExec('run')
//createJavaExec('debug')
//debug.debug = true
